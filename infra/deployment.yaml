AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ImageTag:
    Type: String
  RepoName:
    Type: String
  DiscordBotToken:
    Type: String
  CacheToken:
    Type: String
  CacheEndpoint:
    Type: String
  LambdaExecutionRoleArn:
    Type: String

Resources:
  # Main Lambda Function
  MainLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${RepoName}-main"
      PackageType: Image
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}:${ImageTag}"
      Role: !Ref LambdaExecutionRoleArn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          BOT_TOKEN: !Ref DiscordBotToken
          CACHE_TOKEN: !Ref CacheToken
          CACHE_ENDPOINT: !Ref CacheEndpoint
          APP_TYPE: "main"

  # Scheduler Lambda Function
  SchedulerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${RepoName}-scheduler"
      PackageType: Image
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}:${ImageTag}"
      Role: !Ref LambdaExecutionRoleArn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          BOT_TOKEN: !Ref DiscordBotToken
          CACHE_TOKEN: !Ref CacheToken
          CACHE_ENDPOINT: !Ref CacheEndpoint
          APP_TYPE: "scheduler"

  # API Gateway HTTP API
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: lambda-http-api
      ProtocolType: HTTP

  # Integration: Main
  LambdaIntegrationMain:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt MainLambda.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  # Integration: Scheduler
  LambdaIntegrationScheduler:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt SchedulerLambda.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  # Route: Main
  ApiRouteMain:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${LambdaIntegrationMain}"

  # Route: Scheduler
  ApiRouteScheduler:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "ANY /api/schedule/{proxy+}"
      Target: !Sub "integrations/${LambdaIntegrationScheduler}"

  # Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: "$default"
      AutoDeploy: true

  # Permissions
  LambdaInvokePermissionMain:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MainLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*"

  LambdaInvokePermissionScheduler:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SchedulerLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*"

Outputs:
  ApiUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
    Description: Public HTTP endpoint for the Lambda function
