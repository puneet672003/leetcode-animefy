name: deploy-app

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      REPO_NAME: ${{ vars.REPO_NAME }}
      AWS_REGION: ${{ vars.AWS_REGION }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Image
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ github.run_number }}.${{ github.run_attempt }}"
          docker build -t "$IMAGE_URI" ./app
          docker push "$IMAGE_URI"

  deploy-app:
    needs: build-and-push
    runs-on: ubuntu-latest

    env:
      REPO_NAME: ${{ vars.REPO_NAME }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      CACHE_TOKEN: ${{ secrets.CACHE_TOKEN }}
      CACHE_ENDPOINT: ${{ secrets.CACHE_ENDPOINT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get LambdaExecutionRoleArn
        id: get-role
        run: |
          ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.REPO_NAME }}-base-infra \
            --query "Stacks[0].Outputs[?OutputKey=='LambdaExecutionRoleArn'].OutputValue" \
            --output text)
          echo "LambdaExecutionRoleArn=$ROLE_ARN" >> "$GITHUB_ENV"

      - name: Deploy app
        working-directory: ./infra
        run: |
          aws cloudformation deploy \
            --template-file deployment.yaml \
            --stack-name ${{ env.REPO_NAME }}-app-deploy \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ImageTag=${{ github.run_number }}.${{ github.run_attempt }} \
              RepoName=${{ env.REPO_NAME }} \
              LambdaFunctionName=${{ env.REPO_NAME }}-main \
              DiscordBotToken=${{ env.DISCORD_BOT_TOKEN }} \
              CacheToken=${{ env.CACHE_TOKEN }} \
              CacheEndpoint=${{ env.CACHE_ENDPOINT }} \
              LambdaExecutionRoleArn=${{ env.LambdaExecutionRoleArn }}

      - name: Get API URL
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.REPO_NAME }}-app-deploy \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
            --output text)
          echo "Deployed API URL: $API_URL"
